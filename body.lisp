(in-package :lcc)

(defun print-expr (spec &optional (lvl 0))
  (format t
    "~A~:[~A ~;~*~]~:[~A ~;~*~]~:[~A ~;~*~]~:[~A ~;~*~]~:[~{~A~} ~;~*~]~:[= ~S ~;~*~]~%"
	  (indent lvl) (null (const spec)) (const spec) (null (typeof spec)) (typeof spec)
	  (null (modifier spec)) (modifier spec) (null (const-ptr spec)) (const-ptr spec)
	  (null (array-def spec)) (array-def spec) (null (default spec)) (default spec))
  (let ((body (slot-value spec 'body)))
    (when body
      (dolist (form body)
	(print-expr form (+ 1 lvl))))))

(defun print-body (body &optional (lvl 0))
  (dolist (form body)
    (print-expr form lvl)))

(defun type-spec-string< (spec)
  (format nil "~:[~A ~;~*~]~A ~:[~A ~;~*~]~:[~A ~;~*~]~:[~A ~;~*~]"
	  (null (const spec)) (const spec) (typeof spec) (null (modifier spec)) (modifier spec)
	  (null (const-ptr spec)) (const-ptr spec) (null (array-def spec)) (array-def spec)))

(defun param-spec-match (to-spec from-spec)
  (if (and (null (const to-spec)) (const from-spec)) nil
    (if (not (eql (typeof to-spec) (typeof from-spec)))	nil
      (if (not (eql (modifier to-spec) (modifier from-spec))) nil
	t))))

(defun params-spec-match (to-spec from-spec)
  (let ((counter 0)
	(matched t))
    (maphash #'(lambda (p-name p-spec)
		 (unless (eql p-name (user-symbol "***"))
		   (unless (param-spec-match p-spec (nth counter (slot-value from-spec 'body)))
		     (setq matched nil))
		   (incf counter)))
	     (slot-value to-spec 'params))
    matched))

(defun specify-args (func-spec args globals)
  (dolist (arg args)
    (push (specify-expr arg globals) (slot-value func-spec 'body))))

(defun specify-expr (expr globals)
  (let ((spec nil))
    (cond ((or (null expr) (key-eq '|nil| expr))
	   (setq spec (make-specifier nil '|@EXPR|
				      (user-symbol "const")
				      (user-symbol "int")
				      (user-symbol "*")
				      nil nil expr nil)))
	  ((numberp expr)
	   (setq spec (make-specifier nil '|@EXPR|
				      (user-symbol "const")
				      (user-symbol "int")
				      nil nil nil expr nil)))
	  ((unsigned-int-p expr)
	   (setq spec (make-specifier nil '|@EXPR|
				      (user-symbol "const")
				      (user-symbol "uint")
				      nil nil nil expr nil)))
	  ((long-p expr)
	   (setq spec (make-specifier nil '|@EXPR|
				      (user-symbol "const")
				      (user-symbol "long")
				      nil nil nil expr nil)))
	  ((unsigned-long-p expr)
	   (setq spec (make-specifier nil '|@EXPR|
				      (user-symbol "const")
				      (user-symbol "ulong")
				      nil nil nil expr nil)))
	  ((characterp expr)
	   (setq spec (make-specifier nil '|@EXPR|
				      (user-symbol "const")
				      (user-symbol "char")
				      nil nil nil expr nil)))
	  ((stringp expr)
	   (setq spec (make-specifier nil '|@EXPR|
				      (user-symbol "const")
				      (user-symbol "char")
				      (user-symbol "*")
				      nil nil expr nil)))
	  ((symbolp expr)
	   (let ((sym-spec (gethash expr globals)))
	     (if (null sym-spec)
		 (error (format nil "could not specify symbol ~A" expr))
	       (progn
		 (setq spec (copy-specifier sym-spec))
		 (setf (default spec) expr)))))
	  ((listp expr)
	   (progn
	     (let ((func (car expr))
		   (args (butlast (reverse expr))))
	       (cond ((key-eq func '|->|)
		      (unless (= (length expr) 3) (error (format nil "invalid use of ~A in ~A" func expr)))
		      (let ((type-spec (gethash (nth 1 expr) globals)))
			(when (null type-spec) (error (format nil "undefined variable ~A in ~A" (nth 1 expr) expr)))
			(setq type-spec (gethash (typeof type-spec) globals))
			(let ((member-spec (gethash (nth 2 expr) (slot-value type-spec 'inners))))
			  (when (null member-spec)
			    (error (format nil "undefined member ~A for variable ~A of type ~A in ~A"
					   (nth 2 expr) (default type-spec) (nth 1 expr) expr)))
			  (setq spec (copy-specifier member-spec))
			  (setf (default spec) expr)
			  (specify-args spec args globals))))
		     ((key-eq func '|return|)
		      (when (> (length args) 1) (error (format nil "could not return more than one value in ~A" expr)))
		      (setq spec (make-specifier nil '|@EXPR| nil (user-symbol "void") nil nil nil expr nil))
		      (specify-args spec args globals)
		      (let ((current-function-spec (gethash '|*function*| globals)))
			(unless (param-spec-match current-function-spec (nth 0 (slot-value spec 'body)))
			  (error (format nil "return value ~A is not match with function ~A return type ~A"
					 (nth 0 (slot-value spec 'body))
					 (name current-function-spec)
					 (type-spec-string< current-function-spec))))))
		     ((key-eq func '|set|)
		      (when (> (length args) 2) (error (format nil "could not set more than one value in ~A" expr)))
		      (setq spec (make-specifier nil '|@EXPR| nil (user-symbol "void") nil nil nil expr nil))
		      (specify-args spec args globals)
		      (unless (param-spec-match (nth 0 (slot-value spec 'body)) (nth 1 (slot-value spec 'body)))
			(error (format nil "set sides are not matched ~A" expr))))
		     ((key-eq func '|cast|)
		      (when (> (length args) 2) (error (format nil "cast just function takes a type and a value ~A" expr)))
		      (let ((tmp-spec (make-specifier nil '|@EXPR| nil (user-symbol "void") nil nil nil expr nil)))
			(specify-args tmp-spec args globals)
			(setq spec (copy-specifier (nth 0 (slot-value tmp-spec 'body))))
			(setf (slot-value spec 'body) (slot-value tmp-spec 'body))))
		     (t (let ((func-spec (gethash func globals)))
			  (when (null func-spec) (error (format nil "could not specify function ~A in ~A" func expr)))
			  (setq spec (copy-specifier func-spec))
			  (setf (default spec) expr) 
			  (specify-args spec args globals)
			  (unless (params-spec-match func-spec spec)
			    (error (format nil "parameters and arguments not matched when aclling function ~A in ~A" func expr)))
			  ))))))
	  (t (error (format nil "could not specify expression ~A" expr))))
    ;;(let ((func last))
    ;;  (reduce #'(lambda (right left)
    ;;(format nil "~A ~A" left right))
    ;;(reverse (slot-value spec 'body))))
    spec))
	   
(defun specify-body (body globals)
  (display "body globals:")
  (print-specifiers globals)
  (let ((body-ir '()))
    (if (listp body)
	(dolist (form body)
	  (push (specify-expr form globals) body-ir))
      (error (format nil "wrong body ~A" body)))
    body-ir))
