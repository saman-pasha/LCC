(in-package :lcc)

(defvar *lcc-std* "#ifndef __LCC_STD__
#define __LCC_STD__
#define __lcc_is_same_type(a, b)  __builtin_types_compatible_p(typeof(a), typeof(b))
#define __lcc_is_pointer_or_array(p)  (__builtin_classify_type(p) == 5)
#define __lcc_decay(p)  (&*__builtin_choose_expr(__lcc_is_pointer_or_array(p), p, NULL))
#define __lcc_is_pointer(p)  __lcc_is_same_type(p, __lcc_decay(p))
#define __lcc_pointout(v) (__builtin_choose_expr(__lcc_is_pointer(v), v, &v))
#define __lcc_receiver(s, m) typeof(*__lcc_pointout(s))##_info __lcc_ m
#endif // __LCC_STD__~%")

(defun specify-target (target)
  (let* ((name    (nth 1 target))
	     (args    (nth 2 target))
	     (clauses (nthcdr 3 target))
	     (target-specifier (make-specifier name '|@TARGET| nil nil nil nil nil nil args)))
    (format t "lcc: specifying target ~A~%" name)
    (unless (zerop (mod (length args) 2)) (error (format nil "wrong target features ~A" name)))
    (let ((attributes '()))
      (dolist (clause clauses)
	    (if (consp clause)
	        (let ((construct (car clause)))
	          (cond ((find (char (symbol-name construct) 0) "@#")
		             (specify-preprocessor clause attributes 0 (inners target-specifier))
		             (setq attributes '()))
		            ((key-eq construct '|static|)   (push clause attributes))
		            ((key-eq construct '|declare|)  (push clause attributes))
		            ((key-eq construct '|inline|)   (push clause attributes))
		            ((key-eq construct '|auto|)     (push clause attributes))
		            ((key-eq construct '|register|) (push clause attributes))
		            ((key-eq construct '|extern|)   (push clause attributes))
		            ((key-eq construct '|include|)
		             (specify-include  clause attributes 0 (inners target-specifier))
		             (setq attributes '()))
		            ((key-eq construct '|guard|)
		             (specify-guard    clause attributes 0 (inners target-specifier))
		             (setq attributes '()))
		            ((key-eq construct '|variable|)
		             (specify-variable clause attributes 0 (inners target-specifier))
		             (setq attributes '()))
		            ((key-eq construct '|function|)
		             (specify-function clause attributes 0 (inners target-specifier))
		             (setq attributes '()))
		            ((key-eq construct '|method|)
		             (specify-function clause attributes 0 (inners target-specifier))
		             (setq attributes '()))
		            ((key-eq construct '|enum|)
		             (specify-enum     clause attributes 0 (inners target-specifier))
		             (setq attributes '()))
		            ((key-eq construct '|struct|)
		             (specify-struct   clause attributes 0 (inners target-specifier))
		             (setq attributes '()))
		            ((key-eq construct '|union|)
		             (specify-union    clause attributes 0 (inners target-specifier))
		             (setq attributes '()))
		            ((key-eq construct '|typedef|)
		             (specify-typedef  clause attributes 0 (inners target-specifier))
		             (setq attributes '()))
		            (t (error (format nil "unknown clause ~A in target ~A" construct name)))))
	        (error (format nil "syntax error ~A" clause)))))
    target-specifier))

(defun compile-target (spec globals stdout stderr dump)
  (setq *ast-lines* (make-hash-table :test 'equal))
  (let ((file (format nil "~A" (name spec)))
	    (args (attrs spec)))
    (case file
      ((|t|) (setq *output* t))
      (otherwise
       (progn
         (ensure-directories-exist file)
         (setq *output*
		       (open file
			         :direction :output
			         :if-does-not-exist :create
			         :if-exists :supersede)))))
    (unless dump (format t "lcc: compiling target ~A~%" file))
    (unwind-protect
         (handler-case 
	         (progn
               (funcall *line-num* 0 :reset t)
               (funcall *col-num* 0 :reset t)
	           ;; (output *lcc-std*)
	           (dotimes (i (length args))
	             (when (zerop (mod i 2))
	               (when (key-eq (nth i args) ':|std|)
		             (let ((custom (nth (+ i 1) args)))
		               (when (key-eq custom '|true|)
		                 (output "#include <stdio.h>~%")
		                 (output "#include <stddef.h>~%")
		                 (output "#include <stdint.h>~%")
		                 (output "#include <stdlib.h>~%")
		                 (output "#include <stdbool.h>~%")
                         (output "#include <string.h>~%"))))))
	           (maphash #'(lambda (in-name in-spec)
		                    (case (construct in-spec)
			                  ('|@PREPROC|  (compile-preprocessor in-spec 0 globals))
			                  ('|@INCLUDE|  (compile-include      in-spec 0 globals))
			                  ('|@TYPEDEF|  (compile-typedef      in-spec 0 globals))
			                  ('|@VARIABLE| (compile-variable     in-spec 0 globals))
			                  ('|@FUNCTION| (compile-function     in-spec 0 globals))
			                  ('|@METHOD|   (compile-function     in-spec 0 globals))
			                  ('|@ENUM|     (compile-enum         in-spec 0 globals))
			                  ('|@STRUCT|   (compile-struct       in-spec 0 globals))
			                  ('|@UNION|    (compile-union        in-spec 0 globals))
			                  ('|@GUARD|    (compile-guard        in-spec 0 globals))
			                  (otherwise nil)))
		                (inners spec))
	           (output "~%")
	           (close *output*)
	           (dotimes (i (length args))
	             (when (zerop (mod i 2))
	               (when (key-eq (nth i args) ':|compile|)
		             (let* ((dumper    (getf *configs* 'dumper))
                            (command   (getf *configs* 'compiler))
		                    (program   (car command))
		                    (arguments (cdr command))
		                    (custom    (nth (+ i 1) args)))
                       (unless (key-eq custom '|false|)
		                 (progn
		                   (when (key-eq custom '|true|) (setq custom (list "-c" file)))
                           (if dump
                               (uiop:run-program `(,program ,@arguments ,@dumper ,@custom) :input nil :output stdout :error-output stderr)
		                       (uiop:run-program `(,program ,@arguments ,@custom) :input nil :output stdout :error-output stderr))))))
	               (when (key-eq (nth i args) ':|link|)
		             (let* ((command   (getf *configs* 'linker))
		                    (program   (car command))
		                    (arguments (cdr command))
		                    (custom    (nth (+ i 1) args)))
		               (unless (key-eq custom '|false|)
		                 (uiop:run-program `(,program ,@arguments ,@custom) :input nil :output stdout :error-output stderr)))))))
           (uiop/run-program:subprocess-error (e) (format t "~A~%" e)))
      (progn
	    (if (key-eq file '|t|)
	        (setq *output* t)
	        (close *output*))))
    (setq *output* t)))
