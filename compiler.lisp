(in-package :lcc)

;; IR Intermediate Representation
(defun create-globals (ir &optional (globals (make-hash-table :test 'equal)))
  (maphash #'(lambda (name spec)
	       (case (construct spec)
		 ('|@VARIABLE| (setf (gethash name globals) spec))
		 ('|@FUNCTION|
		  (unless (or (eql (default spec) :ctor) (eql (default spec) :dtor))
		    (setf (gethash name globals) spec)))
		 ('|@TYPEDEF|  (setf (gethash name globals) spec))
		 ('|@ENUM|
		  (unless (anonymous spec) (setf (gethash name globals) spec))
		  (maphash #'(lambda (k v) (setf (gethash k globals) v)) (inners spec)))
		 ('|@STRUCT|
		  (setf (gethash name globals) spec)
		  (maphash #'(lambda (k v)
			       (when (eql (construct v) '|@DECLARES|) (setf (gethash k globals) v)))
			   (inners spec)))
		 ('|@UNION|
		  (setf (gethash name globals) spec)
		  (maphash #'(lambda (k v)
			       (when (eql (construct v) '|@DECLARES|) (setf (gethash k globals) v)))
			   (inners spec)))
		 ('|@GUARD| (create-globals spec globals))
		 (otherwise nil)))
	   (inners ir))
  globals)

;; AST Abstract Syntax Tree
(defun compile-ast (targets)
  (let ((cwd (uiop:getcwd)))
    (uiop:chdir "lcc")
    (dolist (target targets)
      (let ((name    (car target))
	    (ir      nil)
	    (globals nil))
	(cond ((key-eq name '|target|)
	       (setq ir  (specify-target target))
	       (setq globals (create-globals ir))
	       (compile-target ir globals))
	      ((key-eq name '|class|)
	       (setq ir  (specify-class  target))
	       (setq globals (create-globals ir))
	       (compile-class  ir globals))
	      (t (error (format nil "target or class name is missing for ~A" name))))))
    (uiop:chdir cwd)))

(defun compile-lcc-file (file-name)
  (ensure-directories-exist "lcc/meta")
      (compile-ast (read-lcc-file file-name)))
